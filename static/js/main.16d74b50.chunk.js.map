{"version":3,"sources":["dataProvider.js","utils/hooks/useOnClickOutside.js","components/LayerSelector/index.js","components/Header/index.js","components/Marker/index.js","components/Popup/index.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["AppDataContext","createContext","DataProvider","children","useState","appData","setAppData","Provider","value","newData","useOnClickOutside","ref","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","LayerSelector","onToggleAllParks","showPopup","setShowPopup","useContext","popupRef","useRef","className","onClick","icon","faLayerGroup","size","id","type","checked","showAllParks","onChange","htmlFor","Header","data","onRefresh","isLoading","undefined","timestamp","setTimestamp","length","ts","record_timestamp","date","Date","hours","getHours","minutes","getMinutes","count","faRedoAlt","color","spin","Marker","fields","grp_disponible","status","grp_statut","Popup","visible","countSentence","grp_nom","grp_exploitation","wrapperClassName","countClassName","Map","map","setMap","setData","allParks","setAllParks","setIsLoading","popupData","setPopupData","mapContainer","console","log","navigator","platform","storedShowAllParks","localStorage","getItem","mapboxgl","container","style","center","zoom","on","resize","dragRotate","disable","loadImage","error","image","addImage","handleParkSymbolClick","initMap","getData","handlePointClick","useCallback","point","idobj","setTimeout","forEach","location","places","el","createElement","innerText","markerNode","ReactDOM","render","element","setLngLat","addTo","source","features","feature","geometry","coordinates","properties","name","nom_complet","push","getSource","addSource","addLayer","layout","visibility","setLayoutProperty","fetch","then","res","json","result","records","e","getLayoutProperty","show","setItem","App","Boolean","window","hostname","match","accessToken","process","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.16d74b50.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AppDataContext = createContext();\n\nconst DataProvider = ({ children }) => {\n  const [appData, setAppData] = useState({});\n\n  return (\n    <AppDataContext.Provider\n      value={{\n        appData,\n        setAppData: (newData) => setAppData({ ...appData, ...newData }),\n      }}\n    >\n      {children}\n    </AppDataContext.Provider>\n  );\n};\n\nDataProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default DataProvider;\n","import { useEffect } from 'react';\n\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(\n    () => {\n      const listener = event => {\n        // Do nothing if clicking ref's element or descendent elements\n        if (!ref.current || ref.current.contains(event.target)) {\n          return;\n        }\n\n        handler(event);\n      };\n\n      document.addEventListener('mousedown', listener);\n      document.addEventListener('touchstart', listener);\n\n      return () => {\n        document.removeEventListener('mousedown', listener);\n        document.removeEventListener('touchstart', listener);\n      };\n    },\n    [ref, handler],\n  );\n};\n\nexport default useOnClickOutside;\n","import React, { useState, useContext, useRef } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faLayerGroup } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./style.css\";\n\nimport { useOnClickOutside } from '../../utils/hooks';\nimport { AppDataContext } from \"../../dataProvider\";\n\nconst LayerSelector = ({ onToggleAllParks }) => {\n  const [showPopup, setShowPopup] = useState(false);\n  const { appData } = useContext(AppDataContext);\n\n  const popupRef = useRef();\n  useOnClickOutside(popupRef, () => { setShowPopup(false) });\n\n  return (\n    <div ref={popupRef} className=\"layer-selector\">\n      <div className=\"layer-button\" onClick={() => setShowPopup(!showPopup)}>\n        <FontAwesomeIcon icon={faLayerGroup} className=\"layer-icon\" size=\"lg\" />\n      </div>\n      {showPopup && (\n        <div className=\"layer-popup\">\n          <div className=\"layer-row\">\n            <input\n              id=\"toggle-all-parks\"\n              className=\"layer-input\"\n              type=\"checkbox\"\n              checked={appData.showAllParks}\n              onChange={onToggleAllParks}\n            />\n            <label htmlFor=\"toggle-all-parks\" className=\"layer-label\">\n              Afficher tous les parkings relais\n            </label>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default LayerSelector;\n","import React, { useEffect, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedoAlt } from '@fortawesome/free-solid-svg-icons';\nimport './header.css';\n\nimport { AppDataContext } from '../../dataProvider';\nimport LayerSelector from '../LayerSelector';\n\nfunction Header({ data, onRefresh, onToggleAllParks, isLoading }) {\n  const [timestamp, setTimestamp] = useState(undefined);\n\n  const { setAppData } = useContext(AppDataContext);\n\n  // Set last sync time\n  useEffect(() => {\n    if (data.length) {\n      const ts = data[0].record_timestamp;\n      const date = new Date(ts);\n\n      const hours = date.getHours();\n      let minutes = date.getMinutes();\n      minutes = minutes < 10 ? `0${minutes}` : minutes;\n\n      setTimestamp(`${hours}h${minutes}`);\n      setAppData({ count: data.length });\n    }\n  }, [data]);\n\n  return (\n    <div className=\"header-wrapper\">\n      <header>\n        <h1 className=\"header-title\">P+R Nantes</h1>\n        <p className=\"header-version\">v1.2.0</p>\n      </header>\n      {timestamp && (\n        <div className=\"header-timestamp-wrapper\">\n          <p>Mis à jour aujourd'hui à {timestamp}</p>\n          <button\n            type=\"button\"\n            onClick={onRefresh}\n            className=\"header-refresh-button\"\n          >\n            <FontAwesomeIcon\n              icon={faRedoAlt}\n              color=\"#616161\"\n              spin={isLoading}\n            />\n          </button>\n        </div>\n      )}\n      <LayerSelector onToggleAllParks={onToggleAllParks} />\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n  onRefresh: PropTypes.func.isRequired,\n  onToggleAllParks: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './marker.css';\n\nfunction Marker({ data, onClick }) {\n  let count = data.fields.grp_disponible;\n  const status = data.fields.grp_statut;\n  let className = `marker ${\n    count === 0 ? 'danger' : count < 10 ? 'warning' : ''\n  }`;\n\n  if (status === 0) {\n    className += ' invalid';\n    count = 'X';\n  } else if (status === 1) {\n    className = 'marker danger';\n    count = 'X';\n  }\n\n  return <div onClick={() => onClick(data)} className={className}>{count}</div>;\n}\n\nMarker.propTypes = {\n  data: PropTypes.object,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Marker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './popup.css';\n\nfunction Popup({ data, visible, onClick }) {\n  if (!data) return <div className=\"popup-wrapper\"></div>;\n\n  const { grp_nom, grp_disponible, grp_exploitation, grp_statut } = data.fields;\n  let count = grp_disponible;\n\n  const wrapperClassName = `popup-wrapper ${visible ? 'visible' : ''}`;\n\n  let countClassName = `popup-count ${\n    count === 0 ? 'danger' : count < 10 ? 'warning' : ''\n  }`;\n\n  let countSentence;\n  if (count === 0) {\n    countSentence = 'Aucune place disponible';\n  } else if (count === 1) {\n    countSentence = '1 place disponible';\n  } else {\n    countSentence = `${count} places disponibles`;\n  }\n\n  if (grp_statut === 0) {\n    countSentence = 'Comptage hors service';\n    count = 'X';\n    countClassName += ' invalid';\n  } else if (grp_statut === 1) {\n    countSentence = 'Parking fermé';\n    count = 'X';\n    countClassName = 'popup-count danger';\n  }\n\n  return (\n    <div className={wrapperClassName} onClick={onClick}>\n      <div className={countClassName}>{count}</div>\n      <div className=\"popup-informations\">\n        <h3 className=\"popup-park-name\">{grp_nom}</h3>\n        <p className=\"\">{countSentence}</p>\n        <p>\n          Nombre de places totales : <strong>{grp_exploitation}</strong>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nPopup.propTypes = {\n  data: PropTypes.object,\n  visible: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Popup;\n","import React, {\n  useEffect,\n  useState,\n  useRef,\n  useCallback,\n  useContext,\n} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"./Map.css\";\n\nimport { AppDataContext } from \"./dataProvider\";\nimport Header from \"./components/Header\";\nimport Marker from \"./components/Marker\";\nimport Popup from \"./components/Popup\";\n\nfunction Map() {\n  const { appData, setAppData } = useContext(AppDataContext);\n\n  const [map, setMap] = useState(null);\n  const [data, setData] = useState([]);\n  const [allParks, setAllParks] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [popupData, setPopupData] = useState(undefined);\n  const [showPopup, setShowPopup] = useState(false);\n\n  const mapContainer = useRef();\n\n  // Init\n  useEffect(() => {\n    console.log(navigator.platform);\n    const initMap = ({ setMap, mapContainer }) => {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [-1.5543, 47.2107],\n        zoom: 10,\n      });\n\n      map.on(\"load\", () => {\n        setMap(map);\n        map.resize();\n        map.dragRotate.disable();\n\n        // Load and declare park symbol\n        map.loadImage(\n          process.env.PUBLIC_URL + \"/img/parking-symbol@3x.png\",\n          (error, image) => {\n            if (error) throw error;\n            map.addImage(\"parking-symbol\", image);\n          }\n        );\n\n        // Handle parks symbols clicks\n        map.on(\"click\", \"all-parks\", handleParkSymbolClick);\n      });\n    };\n\n    const storedShowAllParks = localStorage.getItem(\"showAllParks\");\n    if (storedShowAllParks) {\n      const val = storedShowAllParks === \"true\" ? true : false;\n      setAppData({ showAllParks: val });\n    }\n\n    if (!map) initMap({ setMap, mapContainer });\n\n    getData();\n  }, []);\n\n  const handlePointClick = useCallback(\n    (point) => {\n      if (popupData && popupData.fields.idobj === point.fields.idobj) {\n        setShowPopup(false);\n\n        // Clear data after animation\n        setTimeout(() => {\n          setPopupData(undefined);\n        }, 300);\n        return;\n      }\n\n      setPopupData(point);\n      setShowPopup(true);\n    },\n    [popupData]\n  );\n\n  // Display real time data on map\n  useEffect(() => {\n    if (map && data.length) {\n      data.forEach((point) => {\n        if (point.fields?.location) {\n          const places = point.fields.grp_disponible;\n\n          const el = document.createElement(\"div\");\n          el.className = `marker ${\n            places === 0 ? \"danger\" : places < 10 ? \"warning\" : \"\"\n          }`;\n          el.innerText = places;\n\n          const markerNode = document.createElement(\"div\");\n          ReactDOM.render(\n            <Marker data={point} onClick={handlePointClick} />,\n            markerNode\n          );\n\n          const location = point.fields.location;\n\n          new mapboxgl.Marker({ element: markerNode })\n            .setLngLat([location[1], location[0]])\n            .addTo(map);\n        }\n      });\n    }\n  }, [map, data, handlePointClick]);\n\n  // Display all parks on map\n  useEffect(() => {\n    if (map && allParks.length) {\n      let source = {\n        type: \"geojson\",\n        data: {\n          type: \"FeatureCollection\",\n          features: [],\n        },\n      };\n\n      allParks.forEach((point) => {\n        if (point.fields?.location) {\n          const location = point.fields.location;\n          const coordinates = [location[1], location[0]];\n\n          const feature = {\n            type: \"Feature\",\n            geometry: {\n              type: \"Point\",\n              coordinates,\n            },\n            properties: {\n              name: point.fields.nom_complet,\n              ...point.fields,\n            },\n          };\n\n          source.data.features.push(feature);\n        }\n      });\n\n      if (!map.getSource(\"all-parks-source\")) {\n        map.addSource(\"all-parks-source\", source);\n        map.addLayer({\n          id: \"all-parks\",\n          type: \"symbol\",\n          source: \"all-parks-source\",\n          layout: {\n            \"icon-image\": \"parking-symbol\",\n            \"icon-size\": 0.25,\n          },\n        });\n\n        // Set visibility according to user choice\n        const visibility = appData.showAllParks === true ? \"visible\" : \"none\";\n        map.setLayoutProperty(\"all-parks\", \"visibility\", visibility);\n      }\n    }\n  }, [map, allParks, appData]);\n\n  const getData = () => {\n    setIsLoading(true);\n\n    // Get all parks of Nantes\n    const allParksUrl =\n      \"https://data.nantesmetropole.fr/api/records/1.0/search/?dataset=244400404_parcs-relais-nantes-metropole&q=&rows=100&facet=libtype&facet=commune&facet=service_velo&facet=autres_service_mob_prox&facet=conditions_d_acces&facet=exploitant\";\n\n    fetch(allParksUrl)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setAllParks(result.records);\n        },\n        (error) => {\n          console.log(\"Error: \", error);\n        }\n      );\n\n    // Get parks with real time places numbers\n    const realTimeUrl =\n      \"https://data.nantesmetropole.fr/api/records/1.0/search/?dataset=244400404_parcs-relais-nantes-metropole-disponibilites&q=&rows=30&facet=grp_nom&facet=grp_statut\";\n\n    fetch(realTimeUrl)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoading(false);\n          setData(result.records);\n        },\n        (error) => {\n          setIsLoading(false);\n          console.log(\"Error: \", error);\n        }\n      );\n  };\n\n  const toggleAllParks = () => {\n    const visibility = map.getLayoutProperty(\"all-parks\", \"visibility\");\n    map.setLayoutProperty(\n      \"all-parks\",\n      \"visibility\",\n      visibility === \"none\" ? \"visible\" : \"none\"\n    );\n    const show = visibility === \"none\" ? true : false;\n    localStorage.setItem(\"showAllParks\", show);\n    setAppData({ showAllParks: show });\n  };\n\n  const handleParkSymbolClick = (e) => {\n    console.log(e);\n    console.log(e.features[0]);\n  };\n\n  return (\n    <div className=\"Map\">\n      <div ref={mapContainer} className=\"mapContainer\" />\n      <Header\n        data={data}\n        onRefresh={getData}\n        onToggleAllParks={toggleAllParks}\n        isLoading={isLoading}\n      />\n      <Popup\n        data={popupData}\n        visible={showPopup}\n        onClick={() => setShowPopup(false)}\n      />\n    </div>\n  );\n}\n\nexport default Map;\n","import React from 'react';\n\nimport DataProvider from \"./dataProvider\";\nimport Map from './Map'\n\nconst App = () => {\n  return (\n    <DataProvider>\n      <div className=\"App\">\n        <Map />\n      </div>\n    </DataProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}