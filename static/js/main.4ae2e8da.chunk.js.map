{"version":3,"sources":["components/Header/index.js","components/Marker/index.js","components/Popup/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","data","refresh","isLoading","useState","undefined","timestamp","setTimestamp","useEffect","length","ts","record_timestamp","date","Date","hours","getHours","minutes","getMinutes","className","type","onClick","icon","faRedoAlt","color","spin","Marker","count","fields","grp_disponible","Popup","visible","countSentence","grp_nom","grp_exploitation","wrapperClassName","countClassName","App","map","setMap","setData","setIsLoading","popupData","setPopupData","showPopup","setShowPopup","mapContainer","useRef","mapboxgl","Map","container","current","style","center","zoom","on","resize","initMap","getData","handlePointClick","useCallback","point","idobj","setTimeout","forEach","geometry","places","el","document","createElement","innerText","markerNode","ReactDOM","render","element","setLngLat","coordinates","addTo","fetch","then","res","json","result","records","error","console","log","ref","Boolean","window","location","hostname","match","accessToken","process","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4ae2e8da.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedoAlt } from '@fortawesome/free-solid-svg-icons';\nimport './header.css';\n\nfunction Header({ data, refresh, isLoading }) {\n  const [timestamp, setTimestamp] = useState(undefined);\n\n  // Set last sync time\n  useEffect(() => {\n    if (data.length) {\n      const ts = data[0].record_timestamp;\n      const date = new Date(ts);\n\n      const hours = date.getHours();\n      let minutes = date.getMinutes();\n      minutes = minutes < 10 ? `0${minutes}` : minutes;\n\n      setTimestamp(`${hours}h${minutes}`);\n    }\n  }, [data]);\n\n  return (\n    <div className=\"header-wrapper\">\n      <header>\n        <h1 className=\"header-title\">P+R Nantes</h1>\n        <p className=\"header-version\">v1.0.0</p>\n      </header>\n      {timestamp && (\n        <div className=\"header-timestamp-wrapper\">\n          <p>Mis à jour aujourd'hui à {timestamp}</p>\n          <button\n            type=\"button\"\n            onClick={refresh}\n            className=\"header-refresh-button\"\n          >\n            <FontAwesomeIcon icon={faRedoAlt} color=\"#616161\" spin={isLoading} />\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nHeader.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object),\n  refresh: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './marker.css';\n\nfunction Marker({ data, onClick }) {\n  const count = data.fields.grp_disponible;\n  const className = `marker ${\n    count === 0 ? 'danger' : count < 10 ? 'warning' : ''\n  }`;\n\n  return <div onClick={() => onClick(data)} className={className}>{count}</div>;\n}\n\nMarker.propTypes = {\n  data: PropTypes.object,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Marker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './popup.css';\n\nfunction Popup({ data, visible, onClick }) {\n  if (!data) return <div className=\"popup-wrapper\"></div>;\n\n  const { grp_nom, grp_disponible, grp_exploitation } = data.fields;\n\n  const wrapperClassName = `popup-wrapper ${visible ? 'visible' : ''}`;\n\n  const countClassName = `popup-count ${\n    grp_disponible === 0 ? 'danger' : grp_disponible < 10 ? 'warning' : ''\n  }`;\n\n  let countSentence;\n  if (grp_disponible === 0) {\n    countSentence = 'Aucune place disponible';\n  } else if (grp_disponible === 1) {\n    countSentence = '1 place disponible';\n  } else {\n    countSentence = `${grp_disponible} places disponibles`;\n  }\n\n  return (\n    <div className={wrapperClassName} onClick={onClick}>\n      <div className={countClassName}>{grp_disponible}</div>\n      <div className=\"popup-informations\">\n        <h3 className=\"popup-park-name\">{grp_nom}</h3>\n        <p className=\"\">{countSentence}</p>\n        <p>\n          Nombre de places totales : <strong>{grp_exploitation}</strong>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nPopup.propTypes = {\n  data: PropTypes.object,\n  visible: PropTypes.bool.isRequired,\n  onClick: PropTypes.func.isRequired\n}\n\nexport default Popup;\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Marker from './components/Marker';\nimport Popup from './components/Popup';\n\nfunction App() {\n  const [map, setMap] = useState(null);\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [popupData, setPopupData] = useState(undefined);\n  const [showPopup, setShowPopup] = useState(false);\n\n  const mapContainer = useRef();\n\n  // Init\n  useEffect(() => {\n    const initMap = ({ setMap, mapContainer }) => {\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/streets-v11',\n        center: [-1.5543, 47.2107],\n        zoom: 10,\n      });\n\n      map.on('load', () => {\n        setMap(map);\n        map.resize();\n      });\n    };\n\n    if (!map) initMap({ setMap, mapContainer });\n\n    getData();\n  }, []);\n\n  const handlePointClick = useCallback(\n    (point) => {\n      if (popupData && popupData.fields.idobj === point.fields.idobj) {\n        setShowPopup(false);\n\n        // Clear data after animation\n        setTimeout(() => {\n          setPopupData(undefined);\n        }, 300);\n        return;\n      }\n\n      setPopupData(point);\n      setShowPopup(true);\n    },\n    [popupData]\n  );\n\n  // Display points on map\n  useEffect(() => {\n    if (map && data.length) {\n      data.forEach((point) => {\n        if (point.geometry) {\n          const places = point.fields.grp_disponible;\n\n          const el = document.createElement('div');\n          el.className = `marker ${\n            places === 0 ? 'danger' : places < 10 ? 'warning' : ''\n          }`;\n          el.innerText = places;\n\n          const markerNode = document.createElement('div');\n          ReactDOM.render(<Marker data={point} onClick={handlePointClick} />, markerNode);\n\n          new mapboxgl.Marker({ element: markerNode })\n            .setLngLat(point.geometry.coordinates)\n            .addTo(map);\n        }\n      });\n    }\n  }, [map, data, handlePointClick]);\n\n  const getData = () => {\n    const url =\n      'https://data.nantesmetropole.fr/api/records/1.0/search/?dataset=244400404_parcs-relais-nantes-metropole-disponibilites&q=&rows=30&facet=grp_nom&facet=grp_statut';\n\n    setIsLoading(true);\n    fetch(url)\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setIsLoading(false);\n          setData(result.records);\n        },\n        (error) => {\n          setIsLoading(false);\n          console.log('Error: ', error);\n        }\n      );\n  };\n\n  return (\n    <div className=\"App\">\n      <div ref={mapContainer} className=\"mapContainer\" />\n      <Header data={data} refresh={getData} isLoading={isLoading} />\n      <Popup\n        data={popupData}\n        visible={showPopup}\n        onClick={() => setShowPopup(false)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport mapboxgl from 'mapbox-gl';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_API_KEY;\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}